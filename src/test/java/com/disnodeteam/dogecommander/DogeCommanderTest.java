/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.disnodeteam.dogecommander;

import org.junit.Test;

public class DogeCommanderTest {
    class SubsystemCounter implements Subsystem {
        private int initHardwareCalls = 0;
        private int periodicCalls = 0;

        @Override
        public void initHardware() {
            ++initHardwareCalls;
        }

        @Override
        public void periodic() {
            ++periodicCalls;
        }

        public int getInitHardwareCalls() {
            return initHardwareCalls;
        }

        public int getPeriodicCalls() {
            return periodicCalls;
        }
    }

    class CommandCounterTimeEnd implements Command {
        private long time = System.currentTimeMillis();

        private int startCalls = 0;
        private int periodicCalls = 0;
        private int stopCalls = 0;

        @Override
        public void start() {
            ++startCalls;
        }

        @Override
        public void periodic() {
            ++periodicCalls;
        }

        @Override
        public void stop() {
            ++stopCalls;
        }

        @Override
        public boolean isCompleted() {
            return System.currentTimeMillis() >= time+100;
        }
    }

    class CommandCounter implements Command {
        private long time = System.currentTimeMillis();

        private int startCalls = 0;
        private int periodicCalls = 0;
        private int stopCalls = 0;
        private int targetPeriodicCalls;

        CommandCounter(int targetPeriodicCalls) {
            this.targetPeriodicCalls = targetPeriodicCalls;
        }

        @Override
        public void start() {
            ++startCalls;
        }

        @Override
        public void periodic() {
            ++periodicCalls;
        }

        @Override
        public void stop() {
            ++stopCalls;
        }

        @Override
        public boolean isCompleted() {
            return periodicCalls >= targetPeriodicCalls;
        }
    }

    private DogeCommander commander;

    private SubsystemCounter subsystem1 = new SubsystemCounter();

    private SubsystemCounter subsystem2 = new SubsystemCounter();

    public DogeCommanderTest() {
        commander = new DogeCommander(new DogeOpMode() {
            @Override
            public boolean opModeIsActive() {
                return true;
            }
        });

        commander.registerSubsystem(subsystem1);
        commander.registerSubsystem(subsystem2);

        commander.init();
        commander.start();
    }


    @Test public void testIfSubsystemMethodsAreCalledByRobot() throws InterruptedException {
        assert(subsystem1.initHardwareCalls == 1);
        assert(subsystem2.initHardwareCalls == 1);

        Thread.sleep(100);

        assert(subsystem1.periodicCalls >= 2);
        assert(subsystem2.periodicCalls >= 2);
    }

    @Test public void testIfDogeCommanderRunsCommands() {
        final int COMMAND1_RUNS = 2;
        final int COMMAND2_RUNS = 5;

        CommandCounter command1 = new CommandCounter(COMMAND1_RUNS);
        CommandCounter command2 = new CommandCounter(COMMAND2_RUNS);

        commander.runCommandsParallel(command1, command2);

        assert(command1.startCalls == 1);
        assert(command2.startCalls == 1);

        assert(command1.periodicCalls == COMMAND1_RUNS);
        assert(command2.periodicCalls == COMMAND2_RUNS);

        assert(command1.stopCalls == 1);
        assert(command2.stopCalls == 1);
    }
}
