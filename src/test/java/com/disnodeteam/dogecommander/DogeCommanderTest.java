/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.disnodeteam.dogecommander;

import com.disnodeteam.dogecommander.DogeCommander;
import com.disnodeteam.dogecommander.Robot;
import com.disnodeteam.dogecommander.Subsystem;
import org.junit.Test;

public class DogeCommanderTest {
    class SubsystemCounter implements Subsystem {
        private int initHardwareCalls = 0;
        private int periodicCalls = 0;

        @Override
        public void initHardware() {
            ++initHardwareCalls;
        }

        @Override
        public void periodic() {
            ++periodicCalls;
        }

        public int getInitHardwareCalls() {
            return initHardwareCalls;
        }

        public int getPeriodicCalls() {
            return periodicCalls;
        }
    }

    class CommandCounter implements Command {
        private long time = System.currentTimeMillis();

        private int startCalls = 0;
        private int periodicCalls = 0;
        private int stopCalls = 0;

        @Override
        public void start() {
            ++startCalls;
        }

        @Override
        public void periodic() {
            ++periodicCalls;
        }

        @Override
        public void stop() {
            ++stopCalls;
        }

        @Override
        public boolean isCompleted() {
            return System.currentTimeMillis() >= time+100;
        }
    }

    private DogeCommander commander = new DogeCommander();

    public DogeCommanderTest() {
        commander.setBot(testRobot);
    }

    private SubsystemCounter subsystem1 = new SubsystemCounter();
    private SubsystemCounter subsystem2 = new SubsystemCounter();

    class TestRobot extends Robot {
        public TestRobot() {
            addSubsystem(subsystem1);
            addSubsystem(subsystem2);
        }
    }

    Robot testRobot = new TestRobot();

    @Test public void testIfSubsystemMethodsAreCalledByRobot() throws InterruptedException {
        commander.init();
        commander.start();

        assert(subsystem1.initHardwareCalls == 1);
        assert(subsystem2.initHardwareCalls == 1);

        Thread.sleep(100);

        assert(subsystem1.periodicCalls >= 2);
        assert(subsystem2.periodicCalls >= 2);
    }

    @Test public void testIfDogeCommanderRunsCommands() {
        CommandCounter command1 = new CommandCounter();
        CommandCounter command2 = new CommandCounter();

        commander.runCommandsParallel(new Command[]{command1, command2});

        assert(command1.startCalls == 1);
        assert(command2.startCalls == 1);

        assert(command1.periodicCalls >= 2);
        assert(command2.periodicCalls >= 2);

        assert(command1.stopCalls == 1);
        assert(command2.stopCalls == 1);

    }
}
